<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js里的数据类型转换</title>
      <link href="/2019/07/02/js%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/07/02/js%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>转化为字符串，转化为数值，转化为布尔值<br><a id="more"></a></p><h2 id="任意类型转换为字符串"><a href="#任意类型转换为字符串" class="headerlink" title="任意类型转换为字符串"></a>任意类型转换为字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数值转化为字符串</span><br><span class="line">    <span class="built_in">String</span>(<span class="number">1</span>)   <span class="comment">//"1"</span></span><br><span class="line">    <span class="number">1.</span>toString()  <span class="comment">//"1"</span></span><br><span class="line">    <span class="number">1</span>+<span class="string">''</span>  <span class="comment">//"1"</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>布尔值转化为字符串</span><br><span class="line">    <span class="built_in">String</span>(ture)   <span class="comment">//"ture"</span></span><br><span class="line">    ture.toString()  <span class="comment">//"ture"</span></span><br><span class="line">    ture+<span class="string">''</span>  <span class="comment">//"ture"</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="literal">null</span>转化为字符串</span><br><span class="line">    <span class="built_in">String</span>(<span class="literal">null</span>)   <span class="comment">//"null"</span></span><br><span class="line">    <span class="literal">null</span>.toString()  <span class="comment">//报错</span></span><br><span class="line">    <span class="literal">null</span>+<span class="string">''</span>  <span class="comment">//"null"</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="literal">undefined</span>转化为字符串</span><br><span class="line">    <span class="built_in">String</span>(<span class="literal">undefined</span>)   <span class="comment">//"undefined"</span></span><br><span class="line">    <span class="literal">undefined</span>.toString()  <span class="comment">//报错</span></span><br><span class="line">    <span class="literal">undefined</span>+<span class="string">''</span>  <span class="comment">//"undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>对象转化为字符串</span><br><span class="line">    <span class="built_in">String</span>(&#123;&#125;)   <span class="comment">//"[object Object]"</span></span><br><span class="line">    &#123;&#125;.toString()  <span class="comment">//报错</span></span><br><span class="line">    (&#123;&#125;)toString()  <span class="comment">//"[object Object]"</span></span><br><span class="line">    &#123;&#125;+<span class="string">''</span>  <span class="comment">//0</span></span><br><span class="line">    (&#123;&#125;)+<span class="string">''</span>  <span class="comment">//"[object Object]"</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;o+<span class="string">''</span>  <span class="comment">//"[object Object]"</span></span><br></pre></td></tr></table></figure><p>注意：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用toString时，null和undefined会报错<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用x+’’时，空对象＋’’返回值为0；({})+’’返回值则是正常的；先声明对象，后返回值也是正常的</p><h2 id="字符串转化为数值"><a href="#字符串转化为数值" class="headerlink" title="字符串转化为数值"></a>字符串转化为数值</h2><table><thead><tr><th>方法</th><th>例子</th><th>注意</th></tr></thead><tbody><tr><td>Number()</td><td><code>Number(&#39;1&#39;) //1</code></td><td></td></tr><tr><td>parseInt(string,radix)</td><td><code>parseInt(&#39;1&#39;,10) //1</code></td><td>radix：基数，未指定则是返回十进制。无法解析成数值，则返回NaN。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">MDN</a></td></tr><tr><td>parseFloat()</td><td><code>parseFloat(&#39;1.23&#39;) //1.23</code></td><td>将一个字符串转为浮点数。无法解析成数值，则返回NaN。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat" target="_blank" rel="noopener">MDN</a></td></tr><tr><td>‘x’-0</td><td><code>&#39;1&#39;-0 //1</code></td><td></td></tr><tr><td>+’x’</td><td><code>+&#39;1&#39; //1</code></td><td><code>+&#39;-1&#39; //-1</code></td></tr></tbody></table><h2 id="转化为布尔值"><a href="#转化为布尔值" class="headerlink" title="转化为布尔值"></a>转化为布尔值</h2><p>(1) boolean()：其中false的有：0，NaN，空字符串，null，undedined；其他的包括空函数都是ture<br>(2) 简便方法：在前面加两个感叹号就能转化为布尔值</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js基础之数据类型</title>
      <link href="/2019/07/01/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-1/"/>
      <url>/2019/07/01/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-1/</url>
      
        <content type="html"><![CDATA[<p>数值、字符串、布尔值、undefined、null、对象<br><a id="more"></a></p><table><thead><tr><th>数据类型</th><th>形式</th><th>其他</th></tr></thead><tbody><tr><td>数值（number）</td><td>整数和小数（比如1和3.14）</td><td>原始类型（简单类型），不能细分</td></tr><tr><td>字符串（string）</td><td>文本（比如Hello World）</td><td>原始类型（简单类型），不能细分</td></tr><tr><td>布尔值（boolean）</td><td>表示真伪的两个特殊值，即true和false</td><td>原始类型（简单类型），不能细分</td></tr><tr><td>undefined</td><td>表示“未定义”或不存在</td><td>特殊值</td></tr><tr><td>null</td><td>表示空值，即此处的值为空</td><td>特殊值</td></tr><tr><td>对象（object）</td><td>各种值组成的集合</td><td>合成类型（复杂类型)</td></tr></tbody></table><p><strong>数据类型的查看：</strong><br><strong>typeof运算符</strong>，注意：<code>typeof null   //object</code>是一个bug，以及<code>typeof object  //function</code>，没有function数据类型<br>instanceof运算符<br>Object.prototype.toString方法</p><h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><p>所有数字都是64位浮点，没有整数。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 第1位：<strong>符号位</strong>，0表示正数，1表示负数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 第2位到第12位（共11位）：<strong>指数部分</strong>，数值范围，不能超过2的11次方减1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 第13位到第64位（共52位）：<strong>小数部分</strong>（即有效数字），大于2的53次方的数值，都无法保持精度。<br>符号位决定了一个数的<strong>正负</strong>，指数部分决定了数值的<strong>大小</strong>，小数部分决定了数值的<strong>精度</strong>。</p><p><strong>不同进制的表现形式：</strong><br>十进制：1~9之间<br>二进制：0b/0B<br>八进制：00/0o/0开头且1~7之内（容易bug，比如电话号码，应该加引号以字符串形式储存）<br>十六进制：0x/0X</p><p><strong>正数与负数：</strong>任何数字都有正负，包括0<br>几乎所有的正零和负零都被当成正常的0，<br>唯一区别的场合：+0或-0当作分母，返回的值是不相等的。如1/+0=+infinity  1/-0=-infinity</p><p><strong>NaN:not a number</strong>,主要出现再将字符串解析为数字出错的场合，<br>如：5-‘x’；一些函数的运行结果；0/0<br>注意：NaN不是独立的数据类型，而是一个<strong>特殊数值</strong>，它的数据类型依然<strong>属于</strong>Number，使用typeof运算符可以看得很清楚。<br>运算规则：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NaN<strong>不等于</strong>任何值，包括他的本身，如<code>NaN === NaN   //false</code>。其中数组indexof方法内部使用的是严格运算符，所以该方法对NaN不成立<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在布尔运算中被当成<strong>false</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NaN与<strong>任何数字</strong>进行计算时，得到的都是NaN</p><p><strong>infinity:无穷</strong>，正无穷/负无穷,，如：Math.pow(2, 1024)  // infinity         0/0  // NaN   1/0 //infinity<br>注意：Infinity大于一切数值（除了NaN），-Infinity小于一切数值（除了NaN）<br>运算规则：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;符合无穷的数字运算规则<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0乘以Infinity，返回NaN；0除以Infinity，返回0；Infinity除以0，返回Infinity。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Infinity加上或乘以Infinity，返回的是Infinity，减去或除以Infinity，返回NaN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;infinity与undifined计算时，返回的都是NaN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与null计算时，把null当成0</p><p><strong>parselnt()</strong>  将字符串转化为整数</p><h1 id="undifined和null"><a href="#undifined和null" class="headerlink" title="undifined和null"></a>undifined和null</h1><p>均表示“没有”，含义非常<strong>相似</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将一个值赋值为undifined和null，语法效果几乎没有区别。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在if语句中，均会被转化为<strong>false</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相等运算符（==）报告两者相等<br><strong>区别：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null表示“空”的对象，转化数值为0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;undifined表示“此处无定义“的原始值，驻华数值市为NaN<br>用法和含义：<br><img src="/2019/07/01/js基础之数据类型-1/undefined用法.png" alt="undefined用法"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量没有值——undifined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一个对象object，现在不想赋值——null //如var obj = null，只是惯例<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一个非对象（string等），现在不想赋值——undefined  //如直接申明一个变量，var a，只是惯例</p><h1 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h1><p>代表真（true）和假（false）两个状态<br>下列运算符号会返回布尔值：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 前置逻辑运算符： ! (Not)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 相等运算符：===，!==，==，!=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 比较运算符：&gt;，&gt;=，&lt;，&lt;=<br>以下六个值为false，其余的均为true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>undifined、null、false、0、NaN、’’或””（空字符串）</strong><br>注意：空数组（[]）和空对象（{}）的布尔值都是true<br>与运算（&amp;&amp;），或运算（||）：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a真b真，a&amp;&amp;b为真，其余为假<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a假b假，a||为假，其余为真</p><h1 id="字符串："><a href="#字符串：" class="headerlink" title="字符串："></a>字符串：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单引号字符串的内部可以是用双引号，如<code>&#39;&quot;&#39;</code>，反正亦可，如<code>&quot;&#39;&quot;</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单引号字符串的内部使用单引号需要用<strong>反斜杠</strong>（\）转义,反正也是如此,如<code>&#39;\&#39;&#39;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最好<strong>统一风格</strong>，只使用一种引号。不过一般来说html语言的属性值是使用双引号，所以很多项目约定js语言的字符串只使用单引号<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;字符串分成多行将会报错<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果必须分成多行，可以在每一行尾部使用反斜杠（\） 注意：反斜杠后面不能有空格，会报错  <strong>易错的语法</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>链接运算符</strong>（+）可以链接多个单行字符串，将长字符串拆分多行书写，输出时也是单行，如<code>&#39;hello &#39;+&#39;world&#39;</code>，等同于<code>&#39;hello word&#39;</code> <strong>好读的语法</strong></p><p><strong>字符串转义：</strong>反斜杠用来表示一些特殊字符串，又称转义符<br><img src="/2019/07/01/js基础之数据类型-1/字符串转义.png" alt="字符串转义"></p><p><strong>字符串与数组</strong><br>字符串可以被视为字符数组。可以用方括号来返回某个位置的字符（位置编号从0开始）<br>如<code>var s = &#39;hello&#39;</code> ，<code>s[0]</code>或<code>&#39;hello&#39;[0]</code>返回值位h<br>如果方括号在超过字符串长度、不是数值、负数等，返回undifined<br>但是字符串与数组只是具有相似性，不能删除、改变字符串</p><p><strong>length</strong> 返回字符串的长度，该属性是无法改变的</p><p><strong>字符集：</strong>js种使用unicode字符集<br>js以Unicode储存，并且可以直接使用。方式：<br>\uxxxx的形式，其中xxxx代表该字符的 Unicode 码点。比如，\u00A9代表版权符号。</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>对象就是一组 <strong>“键值对”</strong>（key-value）的合集，是一种无序的符合数据集合。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">        foo: <span class="string">'hello'</span>,</span><br><span class="line">        bar: <span class="string">'word'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>键名（又称属性）：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>都</strong>是字符串，所以加不加引号都可以<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果是数值会自动转为字符串<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果不符合标识明的条件（比如第一个字符位数字，或者含有空格或运算符），且不是数字，必须加上引号，否则会报错。<br><strong>键值：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对象的每一个键名又称为‘属性’，其‘键值’可以是<strong>任何数据类型</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;键值为函数，可以把属性称为方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;键值为对象，就形成了链式引用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对象的属性之间要用逗号分隔，最后一个可加可不加。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;属性可以动态创建，不必再对象申明时就指定<br><strong>表达式和语句：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如{foo: 123}是表达式还是语句？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一种可能是，这是一个表达式，表示一个包含foo属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签foo，指向表达式123。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了避免这种歧义，JavaScript 引擎的做法是，如果遇到这种情况，无法确定是对象还是代码块，一律解释为代码块。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果要解释为对象，最好在大括号前加上圆括号。因为圆括号的里面，只能是表达式，所以确保大括号只能解释为对象。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如({foo: 123})，这个就会被js解释为对象<br><strong>属性的读取：</strong><br>如<code>var obj = {p: &#39;hello world&#39;};</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点运算符：obj.p<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方括号运算符：obj[‘p’]<br>注意：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p必须加引号，否则会被当成变量处理<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方括号运算符还可以使用表达式，如<code>obj[3+3]</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数字键不加引号，会被自动转化为字符串<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数值键名不能使用点运算符（被当成小数点）<br><strong>属性的赋值：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点运算符：<code>obj.p = ‘hello&#39;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方括号运算符：<code>obj[&#39;p&#39;]   = &#39;word&#39;</code><br><strong>属性的查看：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object.keys<br><strong>属性的删除：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>delete obj.p，</code>删除成功后返回true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意：删除一个不存在的属性，delete也不会报错，而且返回true，因此不能根据delete的结果认定某个属性是存在的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只有一种情况，delete命令会返回false，那就是该属性存在，且不得删除。<br><strong>属性是否存在：</strong>in运算符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">p</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="string">'p'</span> <span class="keyword">in</span> obj   <span class="comment">//true</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> obj  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>注意：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toString是继承属性，in运算符不能识别自身和继承<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以用<code>obj.hasOwnProperty(&#39;toString&#39;)  // false</code> 判断<br><strong>属性的遍历：</strong>for…in循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'键名'</span>,i)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'键值'</span>,obj[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js基础之基本语法</title>
      <link href="/2019/07/01/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/07/01/js%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>本教程主要参考阮一峰的<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">《JavaScript教程》</a><br><a id="more"></a></p><h1 id="JS简介"><a href="#JS简介" class="headerlink" title="JS简介"></a>JS简介</h1><p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。<br><strong>核心语法</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基本的<strong>语法构造</strong>，比如操作符、控制结构、语句<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>标准库</strong>，就是一系列具有各种功能的对象比如Array、Date、Math等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;各种宿主环境提供额外的 <strong>API</strong>（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类：浏览器控制类：操作浏览器； DOM 类：操作网页的各种元素；Web 类：实现互联网的各种功能<br><strong>js功能</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（1）操控浏览器；（2）浏览器平台化；（3）node项目使其可以用于服务器的开发；（4）数据库操作 NoSQL；（5）移动平台开发；（6）内嵌脚本语言；（7）跨平台的桌面应用程序<br><strong>js特点</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;易学性——学习环境无处不在，简单，与主流语言相似；强大的性能——语法灵活，表达力强；支持编译运行；事件驱动和非柱塞式设计；开放性；社区支持和就业机会多</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="执行单位、表达式及语句"><a href="#执行单位、表达式及语句" class="headerlink" title="执行单位、表达式及语句"></a>执行单位、表达式及语句</h2><p>执行单位：<strong>行</strong><br>表达式：如1+3，指为了<strong>得到返回值</strong>的计算式<br>语句：以分号结尾，一个分号就表示一个语句的结束，多个语句可以写在一行。其中如果要在一行里写两个语句，就可以加上<strong>分号</strong>，作为间隔；如果一行只有一个语句，那么语句后面可以接分号，也可以不接分号，接上分号就是显式地断行，不接分号也没问题<br>语句和表达式得区别：</p><blockquote><p>语句主要为了进行某种操作，一般情况下不需要返回值；<br>表达式则是为了得到返回值，一定会返回一个值。<br>凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>区分大小写</li><li>声明和赋值是两个分开的步骤，也可以合在一起。如<code>var a = 1;var a;</code>等同于<code>var a = 1;</code></li><li>没有赋值，变量的值为undefined（特殊得值，表示无定义）</li><li>可以省略var，但是不利于表达意图，容易创建全局变量</li><li>没有声明就直接使用，会报错</li><li>var命令中可以申明多个变量,如<code>var a,b;</code></li><li>变量可以反复赋值，随时更改</li><li><p>空行不影响赋值，<code>var a = 1</code>等同于下面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用var重新声明一个已经存在的变量，是无效的。如果第二次声明的时候还进行了赋值，则会覆盖掉前面的值</p></li></ol><p><strong>变量提升</strong>:javaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>用来识别各种值的合法名称，最常见的是变量名和函数名。区别大小写。<br>规则：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 第一个字符，可以是<strong>任意 Unicode 字母</strong>（包括英文字母和其他语言的字母），以及美元符号（<strong>$</strong>）和下划线（<strong>_</strong>）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用<strong>数字0-9</strong>。<br>如23、***、a+b、-d均不能作为标识符，以及js保留字：</p><blockquote><p>arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield。</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行：<code>//</code><br>多行：<code>/*</code>和<code>*/</code><br>html注释： <code>&lt;!--和--&gt;</code></p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>使用大括号，将多个相关语句组合在一起，称为区块<br>对于var命令来说，JavaScript 的区块不构成单独的作用域（scope）。也就是说<br>区块对于var命令不构成单独的作用域，与不使用区块的情况没有任何区别<br>在 JavaScript 语言中，单独使用区块并不常见，区块往往用来构成其他更复杂的语法结构，比如for、if、while、function等。</p><h2 id="条件语句、循环语句"><a href="#条件语句、循环语句" class="headerlink" title="条件语句、循环语句"></a>条件语句、循环语句</h2><p><a href="https://wangdoc.com/javascript/basic/grammar.html#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener">条件语句</a><br><a href="https://wangdoc.com/javascript/basic/grammar.html#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener">循环语句</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> js </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css布局</title>
      <link href="/2019/04/06/css%E5%B8%83%E5%B1%80/"/>
      <url>/2019/04/06/css%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>css中几种常见的布局以及居中介绍<br><a id="more"></a></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>主要参考mdn的<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout" target="_blank" rel="noopener">布局指南</a>，主要分为：<br>&nbsp;&nbsp;&nbsp;&nbsp;•<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Floats" target="_blank" rel="noopener">浮动</a><br>&nbsp;&nbsp;&nbsp;&nbsp;•<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/%E5%AE%9A%E4%BD%8D" target="_blank" rel="noopener">定位</a><br>&nbsp;&nbsp;&nbsp;&nbsp;•<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox" target="_blank" rel="noopener">弹性盒子</a><br>&nbsp;&nbsp;&nbsp;&nbsp;•<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grids" target="_blank" rel="noopener">网格布局</a><br>其他学习资料：<a href="http://zh.learnlayout.com/no-layout.html" target="_blank" rel="noopener">学习css布局</a></p><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>主要参考<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">css-triks</a><br><img src="/2019/04/06/css布局/css居中.png" alt="css居中"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 布局 </tag>
            
            <tag> 居中 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html标签（一）</title>
      <link href="/2019/03/25/html%E6%A0%87%E7%AD%BE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/03/25/html%E6%A0%87%E7%AD%BE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>html的基本结构及h、p、Hr、img、br、注释、a标签<br><a id="more"></a></p><h2 id="html的基本结构"><a href="#html的基本结构" class="headerlink" title="html的基本结构"></a>html的基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="H系列标签（Header"><a href="#H系列标签（Header" class="headerlink" title="H系列标签（Header)"></a>H系列标签（Header)</h2><p><strong>作用：</strong>用于给文本添加标题语义<br><strong>格式：</strong><code>&lt;h1&gt;文字&lt;/h1&gt;</code><br><strong>注意：</strong><br>    • H1标签是给文本添加标题语义，不是用于修改文本的样式<br>    • 一共有6个，从h1——h6，超过6无效<br>    • 被h系列标签包裹的内容会独占一行<br>    • h1最大，h6最小<br>    •在企业开发中，一定要慎用h类标签，特别是h1标签，在企业开发中一般情况下一个界面中只能出现一个h1标签（和seo有关）</p><h2 id="p标签-paragraph"><a href="#p标签-paragraph" class="headerlink" title="p标签(paragraph)"></a>p标签(paragraph)</h2><p><strong>作用：</strong>告诉浏览器哪些文字是一个段落<br><strong>格式：</strong><code>&lt;p&gt;文字&lt;/p&gt;</code><br><strong>注意：</strong>在浏览器中会单独占一行</p><h2 id="Hr标签（horizontal-rule）"><a href="#Hr标签（horizontal-rule）" class="headerlink" title="Hr标签（horizontal rule）"></a>Hr标签（horizontal rule）</h2><p><strong>作用：</strong>在浏览器上显示一条分割线<br><strong>格式：</strong><code>&lt;hr&gt;</code><br><strong>注意：</strong>在浏览器中单独占据一行；hr标签可以写/（xhtml标准）或者不写（html标准），在做前端开发中，按照高级开发工具提示即可</p><h2 id="img标签-imagine"><a href="#img标签-imagine" class="headerlink" title="img标签(imagine)"></a>img标签(imagine)</h2><p><strong>作用：</strong>image缩写，高速浏览器我们需要显示一张图片<br><strong>格式：</strong><code>&lt;IMG SRC=&quot;&quot;&gt;</code>,src是英文source的缩写，告诉浏览器需要显示的图片名称<br><strong>注意：</strong><br>    • 和h标签、p标签不一样，img标签不会独占一行；<br>    • 指定高度和宽度，可能会导致图片变形，如果要避免变形，只指定宽度或高度其中一个即可<br><strong>属性：</strong><br>    • width宽度(无指定宽度高度，按照默认显示)<br>    • height高度(最好只指定宽度或高度，防止变形)<br>    • title鼠标悬停在鼠标上时所弹出的描述框）<br>    • alt是alternate的缩写，告诉浏览器当需要显示的图片找不到时，做指定的显示内容<br><strong>img标签的路径问题：</strong>其实想给sec属性赋值有两种方式：<br>&nbsp;&nbsp;<strong>i. 相对路径：</strong>每次都从.HTML文件所在的文件夹开始查找<br>&nbsp;&nbsp;&nbsp;&nbsp;同级：图片和.HTML文件储存在同一个文件夹中；格式：<code>&lt;img src=“xx”&gt;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>下级（用的最多）：</strong>储存图片的文件夹和.html文件在同一个文件夹中，格式 : <code>&lt;img src=“images/xx”&gt;</code><br>&nbsp;&nbsp;&nbsp;&nbsp;上级：存储图片的文件和存储.html文件的文件夹在同一个位置；格式：<code>&lt;img src=“../xx”&gt;</code><br>&nbsp;&nbsp;ii. 绝对路径：每次都是从指定的盘符（c盘d盘）开始查找，格式：<code>&lt;img src=&quot;C:\Users\fuyuh\Desktop\HTML5/xx&gt;</code><br><strong>注意：</strong><br>    • 路径中不要出现中文，否则可能出现未知问题<br>    • 如果通过相对路径指定，不能跨盘符<br>    • 以后企业开发中如果需要编写路径，统一使用发斜杠/，不要使用正斜杠、，因为将来我们开放的程序可能会部署到其他操作系统的服务器中，而在其他操作系统中路径都是/。<br>    • 在企业开发中，一般不适用绝对路径，可以移植性不好。也就是说将你写好的代码移植给别人，可能用不了。</p><h2 id="br标签（break）"><a href="#br标签（break）" class="headerlink" title="br标签（break）"></a>br标签（break）</h2><p><strong>作用：</strong>html中换行<br><strong>格式：</strong><code>&lt;br&gt;</code><br><strong>注意：</strong><br>    • 多个br标签可以连续实用，实用多少个br标签就换多少行<br>    • 由于html作用是用于给文本添加语义，而br标签的语义是不另起一个段落换行，而在企业开发中一般情况下需要换行是因为需要另起一个段落，所以企业开发中很少使用br标签 （企业开放中使用p标签的多）</p><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p><strong>作用：</strong>注释<br><strong>格式：</strong><code>&lt;!----&gt;</code></p><h2 id="a标签-anchor"><a href="#a标签-anchor" class="headerlink" title="a标签(anchor)"></a>a标签(anchor)</h2><p><strong>作用：</strong>用于控制页面与页面之间跳转<br><strong>格式：</strong><code>&lt;a href=&quot;指定需要跳转的目标界面&quot;&gt;需要展现给用户查看的内容&lt;/a&gt;</code><br><strong>属性：</strong><br>&nbsp;i. target属性：控制如何跳转，_self当前选项卡跳转（默认）；_blank在新的选项卡中跳转；_parent在父框架跳转；_top在最顶层框架跳转。<br>&nbsp;ii. title属性：与img标签中title一样，都是用来控制鼠标悬停是显示的提示文本<br>&nbsp;iii. id属性：跳转到指定位置；（1）给指定标签指定id属性，如<code>&lt;h2 id=&quot;xx&quot;&gt;</code>（2）告诉a标签需要跳转目标所对象标签的id属性<code>&lt;a href=&quot;#xx&quot;&gt;xxxx&lt;/a&gt;</code>。<br><strong>注意：</strong><br>    • a标签不只可以让文字点击，也可以让图片点击，<code>格式：&lt;a href=&quot;url&quot;&gt;&lt;img src=&quot;xx&quot;&gt;&lt;/a&gt;</code><br>    • 一个a标签必须有一个href属性，否在a标签不知道要跳转到什么地方<br>    • 如果通过a标签的href属性指定一个url地址，那么必须在地质前面加上http://或https://<br>    • a标签的href属性除了可以指定一个网络地址以外，还可以指定一个本地的地址<br><strong>特例：</strong><br>    <code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code>, 伪协议，不起任何效果的跳转。<br>       <code>&lt;a href=&quot;javascript:alert=(1)&quot;&gt;&lt;/a&gt;</code><br>       <code>&lt;a href=&quot;//qq.com&quot;&gt;&lt;/a&gt;</code>，无协议<br>    <code>&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;</code><br>    <code>&lt;a href=&quot;?name=aaa&quot;&gt;&lt;/a&gt;</code><br>    <code>&lt;a href=&quot;./index.html&quot;&gt;&lt;/a&gt;</code><br>    <code>&lt;a href=&quot;download&quot;&gt;&lt;/a&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP入门</title>
      <link href="/2019/03/24/HTTP%E5%85%A5%E9%97%A8/"/>
      <url>/2019/03/24/HTTP%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>HTTP基本介绍<br><a id="more"></a><br><img src="/2019/03/24/HTTP入门/如何访问网页.png" alt="如何访问网页"></p><h2 id="1-在浏览器中输入网页地址"><a href="#1-在浏览器中输入网页地址" class="headerlink" title="1.在浏览器中输入网页地址"></a>1.在浏览器中输入网页地址</h2><p><strong>浏览器：</strong></p><ul><li><p>概念：</p><ul><li>（1） 将网页渲染出来，供用户查看（2）能够让用户通过浏览器，进行网页的交互</li></ul></li><li><p>种类：</p><ul><li>ie /chrome/ firefox/ safari/ opera</li></ul></li><li><p>内核：</p><ul><li>浏览器内核也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内容，以及页面格式信息；IE内核：Trident；谷歌内核：webkit／blink；火狐内核：gecko；Safari内核：webkit；欧朋内核：presto</li></ul></li></ul><p><strong>URL</strong></p><ul><li>uniform resource locator,统一资源定位符，互联网上的每个资源都有一个唯一的URL地址<ul><li>URL就是浏览器地址栏中输入的地址；</li><li>URL格式：URL协议类型+服务器IP地址+服务器端口号+需要访问的资源名称。例：<a href="http://127.0.0.1/index.html(浏览器会自动添加:80)http://127.0.0.1:80/index.html(完整的格式)" target="_blank" rel="noopener">http://127.0.0.1/index.html(浏览器会自动添加:80)http://127.0.0.1:80/index.html(完整的格式)</a></li></ul></li><li>URN(区别URL):<a href="https://www.jianshu.com/p/ba15d066f777" target="_blank" rel="noopener">https://www.jianshu.com/p/ba15d066f777</a></li></ul><h2 id="2-访问互联网，获取ip地址"><a href="#2-访问互联网，获取ip地址" class="headerlink" title="2.访问互联网，获取ip地址"></a>2.访问互联网，获取ip地址</h2><p><strong>TCP协议：</strong></p><ul><li><strong>传输控制协议</strong>（英语：Transmission Control Protocol，缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议</li><li><p><strong>用户数据包协议</strong>（英语：User Datagram Protocol，缩写：UDP），又称用户数据包协议，是一个简单的面向数据报的传输层协议。相比于tcp来说不面向连接、不可靠、但速度较快。</p></li><li><p>TCP协议的运行可划分为三个阶段：连接创建(connection establishment)、数据传送（data transfer）和连接终止（connection termination）。其中TCP用三路握手（或称三次握手，three-way handshake）过程创建一个连接。</p><ul><li>客户端：我要连接你了，可以吗</li><li>服务端：嗯，我准备好了，连接我吧</li><li>客户端：那我连接你咯。</li><li>开始后面步骤 </li></ul></li></ul><p><strong>IP协议</strong></p><ul><li>网际协议（英语：Internet Protocol，缩写为IP），又译互联网协议，是用于分组交换数据网络的一种协议。</li><li>IP是在TCP/IP协议族中网络层的主要协议，任务仅仅是根据源主机和目的主机的地址来传送数据。</li><li>常用ip地址：本地 IP：127.0.0.1 路由器IP：192.168.1.1 电脑是 192.168.1.2，手机是 192.168.1.3</li></ul><p><strong>路由器</strong></p><ul><li>路由器（英语：Router，又称路径器）是一种电讯网络设备，提供路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端（在路由器内部进行），这称为转送。路由工作在OSI模型的第三层——即网络层，例如网际协议（IP）。<ul><li>内网中的设备可以互相访问（比如你可以用电脑或手机进入 <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a> 来查看你的路由器），但是不能直接访问外网，内网设备想要访问外网，就必须经过路由器中转。</li><li>外网中的设备可以互相访问（比如 qq.com 可以把首页发送给你的路由器，你的路由器有外网 IP），但是外网中的设备无法访问你的内网设备（通过路由器访问）</li></ul></li></ul><p><strong>DNS</strong></p><ul><li>域名系统（英文：Domain Name System，缩写： ‘DNS）是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。 </li></ul><h2 id="3-浏览器负责发起请求"><a href="#3-浏览器负责发起请求" class="headerlink" title="3.浏览器负责发起请求"></a>3.浏览器负责发起请求</h2><p><strong>查询请求</strong></p><ul><li>（1）Git Bash<br>  -<code>curl -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</code></li><li>(2)用chrome发请求<ul><li>A. 打开 Network</li><li>B. 地址栏输入网址</li><li>C. 在 Network 点击，查看 request，点击「view source」</li><li>D. 点击「view source」</li><li>E. 可以看到请求的前三部分了</li><li>F. 如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</li></ul></li></ul><p><strong>请求格式</strong><br>    1.动词 路径 协议/版本<br>    2.key1: value1<br>    2.key2: value2<br>    2.key3: value3<br>    2.content-type: application/x-www-form-urlencoded<br>    2.Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>    2.User-Agent: curl/7.54.0<br>    3.<br>    4.要上传的数据</p><ul><li>注意：<ul><li><strong>最多</strong>包含四部分，<strong>最少</strong>包含三部分（也就是第四部分可以为空</li><li>第三部分永远都是一个回车（区分第二部分和第四部分</li><li>动词由 <strong>GET</strong>获取 <strong>POST</strong>新增/上传 PUT整体更新/PATCH局部更新 DELETE删除 HEAD OPTIONS</li><li>这里的路径包括 查询参数，但<strong>不</strong>包括 描点</li><li>如果你没有写路径，那么默认为/</li><li>第2部分中的content-type标注了第四部分的格式</li><li>x-实验性值，没有写入规范</li></ul></li></ul><h2 id="4-服务器在端口接受请求"><a href="#4-服务器在端口接受请求" class="headerlink" title="4.服务器在端口接受请求"></a>4.服务器在端口接受请求</h2><p><strong>端口</strong></p><ul><li>你想要访问一个设备（前提是你使用的是 TCP 或 UDP 协议。），只指定 IP 是不够的，还必须指定端口（Port）。端口其实就是一个编号，并不是一种硬件。</li><li>一个服务器（硬件）不一定只提供一种服务，比如一个服务器既提供 HTTP 服务，又提供 FTP 服务，还提供 SMTP 服务（邮件服务），那么只用一个 IP 是无法告诉服务器你想要使用哪种服务。以这里有一个重要的原则：一个端口对应一个服务。</li><li><p><a href="https://zh.wikipedia.org/wiki/TCP/UDP端口列表#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3" target="_blank" rel="noopener">维基百科</a>把 0 到 1023 号端口对应的服务都告诉你了，点进去看看吧。要提供 HTTP 服务你最好使用 80 端口、要提供 HTTPS 服务你最好使用 443 端口、要提供 FTP 服务你最好使用 21 端口（能不能使用别的端口？可以，不过不建议你违反约定）</p></li><li><p>每个机器一共有 65535（2的16次方减1）个端口（这是协议规定的）。不过这些端口的使用由一些规定</p><ul><li>0 到 1023（2的10次方减1）号端口是留给系统使用的，你只有拥有了管理员权限后，才能使用这 1024 个端口。</li><li>其他端口可以给普通用户使用</li><li>如果一个端口正在提供服务，也就是被占用了，那么就不能再使用这个端口。除非你先停掉正在占用这个端口的服务。以后你们会经常遇到这个问题。</li></ul></li></ul><p><strong>服务器</strong></p><ul><li>一个管理资源并为用户提供服务的计算机软件，通常分为文件服务器（能使用户在其它计算机访问文件），数据库服务器和应用程序服务器。</li><li>运行以上软件的计算机，或称为网络主机（Host）。</li></ul><h2 id="5-浏览器负责返回内容"><a href="#5-浏览器负责返回内容" class="headerlink" title="5.浏览器负责返回内容"></a>5.浏览器负责返回内容</h2><p><strong>响应请求</strong></p><ul><li>（1）Git Bash<br>  -<code>curl -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</code></li><li>(2)用chrome发请求<ul><li>A.打开 Network</li><li>B.输入网址</li><li>C.选中第一个响应</li><li>D.查看 Response Headers，点击「view source」你会看到响应的前两部分</li><li>E.查看 Response 或者 Preview，你会看到响应的第 4 部分</li></ul></li></ul><p><strong>响应格式</strong><br>    1.协议/版本号 状态码 状态解释<br>    2.key1: value1<br>    2.key2: value2<br>    2.contet-length:<br>    2.content-type: text/html<br>    3.<br>    4.要下载的内容</p><p><strong>状态码</strong><br>    • 1xx 不常用<br>    • 2xx 表示成功 （200普通成功，204创建成功）<br>    • 3xx 表示滚吧 （301永久搬走了 302临时不存在 304）<br>    •4xx 表示你错了<br>    •5xx 表示我错了 服务器挂了</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行中is、cat、mv、touch以及网站explainshell.com 的用法</title>
      <link href="/2019/03/18/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/03/18/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>命令行中is、cat、mv、touch以及网站explainshell.com 的用法<br><a id="more"></a></p><p>1.ls 查看路径<br>• Is<br>• Is -a 可以显示.和..开头的文件<br>• Ls -l 显示更多的信息<br>• ls -la 显示更多信息，并且显示尺寸文件</p><p>2.cat<br>cat 命令用于连接文件并打印到标准输出设备上。</p><p>3.mv 移动或重命名文件<br>复制：mv 源路径 目标路径<br>重命名：mv 已有名称 目标名称</p><p>4.touch<br>创建文件：touch 文件名<br>改变文件更新时间：touch 文件名</p><p>5.explainshell.com<br>进入此网站，输入想要查询的内容即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>开博大吉</title>
      <link href="/2019/03/17/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/"/>
      <url>/2019/03/17/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</url>
      
        <content type="html"><![CDATA[<p>我的博客开通啦~</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
